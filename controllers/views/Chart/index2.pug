html
  head
    title Cube
    meta(charset="utf-8")
    meta(name="viewport", content="width=device-width")
    script
      include ../../../public/cube.js
  body
    <canvas></canvas>
    script.
      var context = document.querySelector("canvas").getContext("2d");

      var cubes = [new Cube(50, -50, 200, 100), new Cube(50, 50, 200, 100), new Cube(-50, -50, 200, 100), new Cube(-50, 50, 200, 100)];
      var fillStyle = ["#666666", "#ffffff", "#ffffff", "#666666"];
      //- var cubes = [new Cube(0, 0, 200, 100)];
      
      var height = 500;//document.documentElement.clientHeight;
      var width = 600;//document.documentElement.clientWidth;

      function loop(){
        window.requestAnimationFrame(loop);

        context.canvas.height = height;
        context.canvas.width = width;

        context.fillStyle = "#008000";
        context.fillRect(0, 0, width, height);

        context.strokeStyle = "#000000";

        for( let i = cubes.length - 1; i > -1; --i){
          let cube = cubes[i];
          //- cube.rotateX(0.01);
          //- cube.rotateY(-0.01);
          //- cube.rotateZ(0.01);

          context.fillStyle = fillStyle[i];

          var vertices = project1(cube.vertices, width, height);

          for( let index = cube.faces.length - 1; index > -1; --index){
            let face = cube.faces[index];

            let p1 = cube.vertices[face[0]];
            let p2 = cube.vertices[face[1]];
            let p3 = cube.vertices[face[2]];

            let v1 = new Point3D(p2.x-p1.x, p2.y-p1.y, p2.z-p1.z);
            let v2 = new Point3D(p3.x-p1.x, p3.y-p1.y, p3.z-p1.z);

            let n = new Point3D(v1.y*v2.z - v1.z*v2.y, v1.z*v2.x-v1.x*v2.z, v1.x*v2.y-v1.y*v2.x);

            if(-p1.x * n.x + -p1.y*n.y + -p1.z*n.z >=0) {
              context.beginPath();
              context.moveTo(vertices[face[0]].x, vertices[face[0]].y);
              context.lineTo(vertices[face[1]].x, vertices[face[1]].y);
              context.lineTo(vertices[face[2]].x, vertices[face[2]].y);
              context.lineTo(vertices[face[3]].x, vertices[face[3]].y);
              context.closePath();
              context.fill();
              context.stroke();
            }
          }
        }
      }

      loop();
      
